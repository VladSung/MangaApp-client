/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n    query searchComicsBySearchText($search: String!) {\n        comic {\n            all(filter: { searchText: $search }, paginate: { first: 10 }) {\n                pageInfo {\n                    totalCount\n                }\n                edges {\n                    node {\n                        id\n                        title\n                        alternativeTitles\n                        cover\n                    }\n                }\n            }\n        }\n    }\n": types.SearchComicsBySearchTextDocument,
    "\n    query ChaptersByComicId($id: ID!, $sort: OrderBy!, $paginate: ChapterPaginateInput!) {\n        chapter {\n            all(comicId: $id, sort: $sort, paginate: $paginate) {\n                edges {\n                    node {\n                        title\n                        volume\n                        number\n                        id\n                        publishDate\n                        price\n                        usersReadHistory {\n                            id\n                        }\n                    }\n                }\n                pageInfo {\n                    totalCount\n                }\n            }\n        }\n    }\n": types.ChaptersByComicIdDocument,
    "\n    query ComicInfo($id: ID!) {\n        comic {\n            one(id: $id) {\n                id\n                title\n                alternativeTitles\n                cover\n                maturityRating\n                description\n                status\n                usersReadHistory(paginate: { first: 0 }) {\n                    pageInfo {\n                        totalCount\n                    }\n                }\n                createdAt\n                rating {\n                    rating\n                    totalCount\n                }\n                bookmarks(paginate: { first: 0 }) {\n                    pageInfo {\n                        totalCount\n                    }\n                }\n                lastReadChapter {\n                    id\n                    volume\n                    number\n                }\n                chapters(paginate: { first: 1 }) {\n                    pageInfo {\n                        totalCount\n                    }\n                }\n                genres {\n                    id\n                    title\n                }\n                tags {\n                    id\n                    title\n                }\n                team {\n                    id\n                    name\n                    avatar\n                }\n            }\n        }\n    }\n": types.ComicInfoDocument,
    "\n    #graphql\n    query ComicMeta($id: ID!) {\n        comic {\n            one(id: $id) {\n                id\n                title\n                description\n                cover\n            }\n        }\n    }\n": types.ComicMetaDocument,
    "\n    #graphql\n    query ComicFormSelections {\n        genre {\n            all {\n                id\n                title\n            }\n        }\n        tag {\n            all {\n                id\n                title\n            }\n        }\n        user {\n            me {\n                membersOf(paginate: { first: null }) {\n                    edges {\n                        node {\n                            team {\n                                id\n                                avatar\n                                name\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n": types.ComicFormSelectionsDocument,
    "\n    query MyTeams {\n        user {\n            me {\n                membersOf(paginate: { first: null }) {\n                    edges {\n                        node {\n                            team {\n                                id\n                                name\n                                avatar\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n": types.MyTeamsDocument,
    "\n    mutation AddTeamMutation($input: AddTeamInput!) {\n        team {\n            create(input: $input) {\n                record {\n                    id\n                    name\n                    avatar\n                }\n                issue {\n                    message\n                }\n            }\n        }\n    }\n": types.AddTeamMutationDocument,
    "\n    query TeamInfo($id: ID!) {\n        team {\n            one(id: $id) {\n                id\n                avatar\n                publicId\n                name\n                description\n                socialLinks\n                members(paginate: { first: null }) {\n                    pageInfo {\n                        totalCount\n                    }\n                    edges {\n                        node {\n                            id\n                            role\n                            user {\n                                publicId\n                                email\n                                name\n                                avatar\n                            }\n                        }\n                    }\n                }\n                comics {\n                    pageInfo {\n                        totalCount\n                    }\n                    edges {\n                        node {\n                            id\n                            title\n                            alternativeTitles\n                            cover\n                            updatedAt\n                        }\n                    }\n                }\n            }\n        }\n    }\n": types.TeamInfoDocument,
    "\n    #graphql\n    query UserAvatar {\n        user {\n            me {\n                publicId\n                avatar\n            }\n        }\n    }\n": types.UserAvatarDocument,
    "\n    #graphql\n    mutation addBookmark($input: BookmarkInput!) {\n        bookmark {\n            add(input: $input) {\n                record {\n                    title\n                    id\n                }\n                issue {\n                    message\n                }\n            }\n        }\n    }\n": types.AddBookmarkDocument,
    "\n    #graphql\n    mutation deleteBookmark($id: ID!) {\n        bookmark {\n            delete(id: $id) {\n                record {\n                    title\n                    id\n                }\n                issue {\n                    message\n                }\n            }\n        }\n    }\n": types.DeleteBookmarkDocument,
    "\n    mutation RateComic($input: RateInput!) {\n        comic {\n            rate(input: $input) {\n                record {\n                    totalCount\n                    rating\n                }\n                issue {\n                    message\n                }\n            }\n        }\n    }\n": types.RateComicDocument,
    "\n    fragment comicFragment on Comic {\n        id\n        rating {\n            rating\n            totalCount\n        }\n    }\n": types.ComicFragmentFragmentDoc,
    "\n    #graphql\n    mutation AddCommentToComic($input: CommentInput!) {\n        comment {\n            create(input: $input) {\n                issue {\n                    message\n                }\n                record {\n                    repliesCount\n                    isReply\n                    reactions {\n                        like\n                        dislike\n                        userReactType\n                    }\n                    content\n                    createdAt\n                    updatedAt\n                    isPinned\n                    id\n                    author {\n                        id\n                        publicId\n                        name\n                        avatar\n                    }\n                }\n            }\n        }\n    }\n": types.AddCommentToComicDocument,
    "\n    #graphql\n    query CommentsByComic($id: ID!, $paginate: PaginateInput!, $sort: CommentSort!) {\n        comment {\n            allByComic(comicId: $id, paginate: $paginate, sort: $sort) {\n                pageInfo {\n                    totalCount\n                    hasNextPage\n                    endCursor\n                }\n                edges {\n                    node {\n                        createdAt\n                        content\n                        id\n                        isReply\n                        updatedAt\n                        reactions {\n                            userReactType\n                            like\n                            dislike\n                        }\n                        isPinned\n                        repliesCount\n                        author {\n                            id\n                            publicId\n                            avatar\n                            name\n                        }\n                    }\n                }\n            }\n        }\n    }\n": types.CommentsByComicDocument,
    "\n    #graphql\n    query CommentReplies($id: ID!, $sort: CommentSort!) {\n        commentReply {\n            allByCommentId(commentId: $id, sort: $sort) {\n                pageInfo {\n                    totalCount\n                }\n                edges {\n                    node {\n                        createdAt\n                        content\n                        isReply\n                        id\n                        updatedAt\n                        reactions {\n                            like\n                            dislike\n                            userReactType\n                        }\n                        mentionedUserPublicId\n                        isPinned\n                        author {\n                            id\n                            publicId\n                            avatar\n                            name\n                        }\n                    }\n                }\n            }\n        }\n    }\n": types.CommentRepliesDocument,
    "\n    query CommentsByChapter($id: ID!, $paginate: PaginateInput!, $sort: CommentSort!) {\n        comment {\n            allByChapter(chapterId: $id, paginate: $paginate, sort: $sort) {\n                pageInfo {\n                    totalCount\n                    hasNextPage\n                    endCursor\n                }\n                edges {\n                    node {\n                        createdAt\n                        content\n                        isPinned\n                        reactions {\n                            like\n                            dislike\n                        }\n                        updatedAt\n                        isReply\n                        repliesCount\n                        id\n                        author {\n                            id\n                            publicId\n                            avatar\n                            name\n                        }\n                    }\n                }\n            }\n        }\n    }\n": types.CommentsByChapterDocument,
    "\n    fragment commentFragment on Comment {\n        createdAt\n        content\n        isPinned\n        reactions {\n            like\n            dislike\n            userReactType\n        }\n        isReply\n        updatedAt\n        repliesCount\n        id\n        author {\n            id\n            publicId\n            avatar\n            name\n        }\n    }\n": types.CommentFragmentFragmentDoc,
    "\n    #graphql\n    mutation UpdateComment($input: CommentUpdateInput!) {\n        comment {\n            update(input: $input) {\n                record {\n                    id\n                    content\n                }\n            }\n        }\n    }\n": types.UpdateCommentDocument,
    "\n    #graphql\n    mutation DeleteComment($commentId: ID!) {\n        comment {\n            delete(id: $commentId) {\n                record {\n                    id\n                }\n                issue {\n                    message\n                }\n            }\n        }\n    }\n": types.DeleteCommentDocument,
    "\n    #graphql\n    mutation PinComment($commentId: ID!) {\n        comment {\n            pin(id: $commentId) {\n                record {\n                    id\n                }\n                issue {\n                    message\n                }\n            }\n        }\n    }\n": types.PinCommentDocument,
    "\n    #graphql\n    mutation UnpinComment($commentId: ID!) {\n        comment {\n            unpin(id: $commentId) {\n                record {\n                    id\n                }\n                issue {\n                    message\n                }\n            }\n        }\n    }\n": types.UnpinCommentDocument,
    "\n                                fragment _ on Chapter {\n                                    usersReadHistory {\n                                        id\n                                    }\n                                }\n                            ": types._FragmentDoc,
    "\n    #graphql\n    mutation addReadHistory($input: AddReadHistoryInput!) {\n        readHistory {\n            add(input: $input) {\n                record {\n                    id\n                    chapter {\n                        id\n                    }\n                }\n                issue {\n                    message\n                }\n            }\n        }\n    }\n": types.AddReadHistoryDocument,
    "\n    mutation generateInviteLink($teamId: ID!) {\n        team {\n            generateTeamInviteLink(teamId: $teamId, role: \"Viewer\") {\n                record\n                issue {\n                    message\n                }\n            }\n        }\n    }\n": types.GenerateInviteLinkDocument,
    "\n    mutation SendInviteEmail($teamId: ID!, $email: String!) {\n        team {\n            sendInviteToEmail(teamId: $teamId, email: $email, role: \"Viewer\") {\n                record\n            }\n        }\n    }\n": types.SendInviteEmailDocument,
    "\n    query UserSettingQuery {\n        user {\n            me {\n                name\n                avatar\n            }\n        }\n    }\n": types.UserSettingQueryDocument,
    "\n    query chapterImages($comicId: ID!, $paginate: ChapterPaginateInput!) {\n        chapter {\n            all(comicId: $comicId, paginate: $paginate, sort: asc) {\n                edges {\n                    node {\n                        id\n                        title\n                        volume\n                        number\n                        images {\n                            path\n                            aspectRatio\n                        }\n                    }\n                }\n\n                pageInfo {\n                    hasNextPage\n                    totalCount\n                    endCursor\n                }\n            }\n        }\n    }\n": types.ChapterImagesDocument,
    "\n    fragment _ on Chapter {\n        usersReadHistory {\n            id\n        }\n    }\n": types._FragmentDoc,
    "\n    query LastChapterOfComic($id: ID!) {\n        comic {\n            one(id: $id) {\n                title\n                chapters(paginate: { first: 1, before: null }, sort: desc) {\n                    edges {\n                        node {\n                            id\n                            volume\n                            number\n                        }\n                    }\n                    pageInfo {\n                        totalCount\n                    }\n                }\n            }\n        }\n    }\n": types.LastChapterOfComicDocument,
    "\n    mutation AddChapter($input: addChapterInput!) {\n        chapter {\n            add(input: $input) {\n                record {\n                    id\n                    volume\n                    number\n                }\n                issue {\n                    message\n                }\n            }\n        }\n    }\n": types.AddChapterDocument,
    "\n    query ComicBaseInfo($id: ID!) {\n        comic {\n            one(id: $id) {\n                id\n                title\n                cover\n                description\n                status\n                maturityRating\n                language\n                createdAt\n                updatedAt\n                count\n                rating {\n                    totalCount\n                    rating\n                }\n                genres {\n                    title\n                }\n                tags {\n                    title\n                }\n            }\n        }\n    }\n": types.ComicBaseInfoDocument,
    "\n    mutation deleteComic($id: ID!) {\n        comic {\n            delete(id: $id) {\n                record {\n                    id\n                    title\n                }\n            }\n        }\n    }\n": types.DeleteComicDocument,
    "\n    query DashboardOverview {\n        user {\n            me {\n                name\n                membersOf(paginate: { first: 5 }) {\n                    edges {\n                        node {\n                            role\n                            team {\n                                id\n                                name\n                                avatar\n                                comics {\n                                    edges {\n                                        node {\n                                            id\n                                            title\n                                            cover\n                                            status\n                                            count\n                                            updatedAt\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                notifications(paginate: { first: 5 }) {\n                    edges {\n                        node {\n                            id\n                            title\n                            description\n                            createdAt\n                            type\n                        }\n                    }\n                }\n            }\n        }\n    }\n": types.DashboardOverviewDocument,
    "\n    query DashboardStatistics {\n        user {\n            me {\n                membersOf(paginate: { after: null }) {\n                    edges {\n                        node {\n                            team {\n                                id\n                                name\n                                comics {\n                                    edges {\n                                        node {\n                                            id\n                                            title\n                                            rating {\n                                                rating\n                                                totalCount\n                                            }\n                                            usersReadHistory(paginate: { first: null }) {\n                                                pageInfo {\n                                                    totalCount\n                                                }\n                                            }\n                                            comments(paginate: { after: null }) {\n                                                pageInfo {\n                                                    totalCount\n                                                }\n                                            }\n                                            subscriptions {\n                                                pageInfo {\n                                                    totalCount\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n": types.DashboardStatisticsDocument,
    "\n    mutation DeleteUserTeam($teamId: ID!) {\n        team {\n            delete(id: $teamId) {\n                record {\n                    id\n                }\n            }\n        }\n    }\n": types.DeleteUserTeamDocument,
    "\n    query MeBookmarks {\n        user {\n            me {\n                bookmarks(paginate: { after: null }) {\n                    edges {\n                        node {\n                            id\n                            title\n                            comics {\n                                id\n                                title\n                                cover\n                                lastReadChapter {\n                                    volume\n                                    id\n                                    number\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n": types.MeBookmarksDocument,
    "\n    query MeProfileInfo {\n        user {\n            me {\n                name\n                publicId\n                avatar\n                description\n                background\n                socialLinks\n                membersOf(paginate: { first: null }) {\n                    edges {\n                        node {\n                            role\n                            id\n                            team {\n                                id\n                                name\n                                avatar\n                                description\n                                comics {\n                                    edges {\n                                        node {\n                                            id\n                                            title\n                                            cover\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n": types.MeProfileInfoDocument,
    "\n    query UserInfo($id: ID!) {\n        user {\n            one(id: $id) {\n                id\n                avatar\n                name\n                publicId\n                description\n                background\n                membersOf(paginate: { first: null }) {\n                    edges {\n                        node {\n                            id\n                            role\n                            comics {\n                                id\n                                cover\n                                title\n                            }\n                            team {\n                                id\n                                description\n                                name\n                                avatar\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n": types.UserInfoDocument,
    "\n    #graphql\n    mutation AddComic($input: AddComicInput!) {\n        comic {\n            add(input: $input) {\n                issue{\n                    message\n                }\n                record {\n                    id\n                    title\n                }\n            }\n        }\n    }\n": types.AddComicDocument,
    "\n    query ComicsWithFilters($paginate: PaginateInput!, $filter: ComicFilterInput) {\n        comic {\n            all(paginate: $paginate, filter: $filter) {\n                pageInfo {\n                    endCursor\n                    totalCount\n                    hasNextPage\n                }\n                edges {\n                    node {\n                        id\n                        cover\n                        title\n                        alternativeTitles\n                        updatedAt\n                    }\n                }\n            }\n        }\n    }\n": types.ComicsWithFiltersDocument,
    "\n    query PopularComics($paginate: PaginateInput!) {\n        comic {\n            popular(paginate: $paginate) {\n                edges {\n                    node {\n                        title\n                        cover\n                        id\n                    }\n                }\n            }\n        }\n    }\n": types.PopularComicsDocument,
    "\n    query UserComicForUpdate($id: ID!) {\n        comic {\n            one(id: $id) {\n                genres {\n                    id\n                    title\n                }\n                tags {\n                    id\n                    title\n                }\n                team {\n                    id\n                    avatar\n                    name\n                }\n                title\n                alternativeTitles\n                cover\n                description\n                language\n                status\n                maturityRating\n            }\n        }\n    }\n": types.UserComicForUpdateDocument,
    "\n    mutation UpdateComic($id: ID!, $input: UpdateComicInput!) {\n        comic {\n            update(id: $id, input: $input) {\n                record {\n                    id\n                }\n            }\n        }\n    }\n": types.UpdateComicDocument,
    "\n    mutation UpdateCommentReaction($input: UpdateCommentReactionInput!) {\n        comment {\n            updateReaction(input: $input) {\n                issue {\n                    message\n                }\n                record {\n                    reactions {\n                        like\n                        dislike\n                        userReactType\n                    }\n                }\n            }\n        }\n    }\n": types.UpdateCommentReactionDocument,
    "\n    mutation deleteChapter($id: ID!) {\n        chapter {\n            delete(id: $id) {\n                record {\n                    id\n                }\n                issue {\n                    message\n                }\n            }\n        }\n    }\n": types.DeleteChapterDocument,
    "\n    query userComics {\n        user {\n            me {\n                id\n                membersOf(paginate: { first: null }) {\n                    edges {\n                        node {\n                            id\n                            team {\n                                id\n                                name\n                                comics {\n                                    edges {\n                                        node {\n                                            id\n                                            cover\n                                            title\n                                            alternativeTitles\n                                            updatedAt\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n": types.UserComicsDocument,
    "\n                            fragment _Team on Team {\n                                id\n                                avatar\n                                name\n                            }\n                        ": types._TeamFragmentDoc,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query searchComicsBySearchText($search: String!) {\n        comic {\n            all(filter: { searchText: $search }, paginate: { first: 10 }) {\n                pageInfo {\n                    totalCount\n                }\n                edges {\n                    node {\n                        id\n                        title\n                        alternativeTitles\n                        cover\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query searchComicsBySearchText($search: String!) {\n        comic {\n            all(filter: { searchText: $search }, paginate: { first: 10 }) {\n                pageInfo {\n                    totalCount\n                }\n                edges {\n                    node {\n                        id\n                        title\n                        alternativeTitles\n                        cover\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query ChaptersByComicId($id: ID!, $sort: OrderBy!, $paginate: ChapterPaginateInput!) {\n        chapter {\n            all(comicId: $id, sort: $sort, paginate: $paginate) {\n                edges {\n                    node {\n                        title\n                        volume\n                        number\n                        id\n                        publishDate\n                        price\n                        usersReadHistory {\n                            id\n                        }\n                    }\n                }\n                pageInfo {\n                    totalCount\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query ChaptersByComicId($id: ID!, $sort: OrderBy!, $paginate: ChapterPaginateInput!) {\n        chapter {\n            all(comicId: $id, sort: $sort, paginate: $paginate) {\n                edges {\n                    node {\n                        title\n                        volume\n                        number\n                        id\n                        publishDate\n                        price\n                        usersReadHistory {\n                            id\n                        }\n                    }\n                }\n                pageInfo {\n                    totalCount\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query ComicInfo($id: ID!) {\n        comic {\n            one(id: $id) {\n                id\n                title\n                alternativeTitles\n                cover\n                maturityRating\n                description\n                status\n                usersReadHistory(paginate: { first: 0 }) {\n                    pageInfo {\n                        totalCount\n                    }\n                }\n                createdAt\n                rating {\n                    rating\n                    totalCount\n                }\n                bookmarks(paginate: { first: 0 }) {\n                    pageInfo {\n                        totalCount\n                    }\n                }\n                lastReadChapter {\n                    id\n                    volume\n                    number\n                }\n                chapters(paginate: { first: 1 }) {\n                    pageInfo {\n                        totalCount\n                    }\n                }\n                genres {\n                    id\n                    title\n                }\n                tags {\n                    id\n                    title\n                }\n                team {\n                    id\n                    name\n                    avatar\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query ComicInfo($id: ID!) {\n        comic {\n            one(id: $id) {\n                id\n                title\n                alternativeTitles\n                cover\n                maturityRating\n                description\n                status\n                usersReadHistory(paginate: { first: 0 }) {\n                    pageInfo {\n                        totalCount\n                    }\n                }\n                createdAt\n                rating {\n                    rating\n                    totalCount\n                }\n                bookmarks(paginate: { first: 0 }) {\n                    pageInfo {\n                        totalCount\n                    }\n                }\n                lastReadChapter {\n                    id\n                    volume\n                    number\n                }\n                chapters(paginate: { first: 1 }) {\n                    pageInfo {\n                        totalCount\n                    }\n                }\n                genres {\n                    id\n                    title\n                }\n                tags {\n                    id\n                    title\n                }\n                team {\n                    id\n                    name\n                    avatar\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    #graphql\n    query ComicMeta($id: ID!) {\n        comic {\n            one(id: $id) {\n                id\n                title\n                description\n                cover\n            }\n        }\n    }\n"): (typeof documents)["\n    #graphql\n    query ComicMeta($id: ID!) {\n        comic {\n            one(id: $id) {\n                id\n                title\n                description\n                cover\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    #graphql\n    query ComicFormSelections {\n        genre {\n            all {\n                id\n                title\n            }\n        }\n        tag {\n            all {\n                id\n                title\n            }\n        }\n        user {\n            me {\n                membersOf(paginate: { first: null }) {\n                    edges {\n                        node {\n                            team {\n                                id\n                                avatar\n                                name\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    #graphql\n    query ComicFormSelections {\n        genre {\n            all {\n                id\n                title\n            }\n        }\n        tag {\n            all {\n                id\n                title\n            }\n        }\n        user {\n            me {\n                membersOf(paginate: { first: null }) {\n                    edges {\n                        node {\n                            team {\n                                id\n                                avatar\n                                name\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query MyTeams {\n        user {\n            me {\n                membersOf(paginate: { first: null }) {\n                    edges {\n                        node {\n                            team {\n                                id\n                                name\n                                avatar\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query MyTeams {\n        user {\n            me {\n                membersOf(paginate: { first: null }) {\n                    edges {\n                        node {\n                            team {\n                                id\n                                name\n                                avatar\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation AddTeamMutation($input: AddTeamInput!) {\n        team {\n            create(input: $input) {\n                record {\n                    id\n                    name\n                    avatar\n                }\n                issue {\n                    message\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation AddTeamMutation($input: AddTeamInput!) {\n        team {\n            create(input: $input) {\n                record {\n                    id\n                    name\n                    avatar\n                }\n                issue {\n                    message\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query TeamInfo($id: ID!) {\n        team {\n            one(id: $id) {\n                id\n                avatar\n                publicId\n                name\n                description\n                socialLinks\n                members(paginate: { first: null }) {\n                    pageInfo {\n                        totalCount\n                    }\n                    edges {\n                        node {\n                            id\n                            role\n                            user {\n                                publicId\n                                email\n                                name\n                                avatar\n                            }\n                        }\n                    }\n                }\n                comics {\n                    pageInfo {\n                        totalCount\n                    }\n                    edges {\n                        node {\n                            id\n                            title\n                            alternativeTitles\n                            cover\n                            updatedAt\n                        }\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query TeamInfo($id: ID!) {\n        team {\n            one(id: $id) {\n                id\n                avatar\n                publicId\n                name\n                description\n                socialLinks\n                members(paginate: { first: null }) {\n                    pageInfo {\n                        totalCount\n                    }\n                    edges {\n                        node {\n                            id\n                            role\n                            user {\n                                publicId\n                                email\n                                name\n                                avatar\n                            }\n                        }\n                    }\n                }\n                comics {\n                    pageInfo {\n                        totalCount\n                    }\n                    edges {\n                        node {\n                            id\n                            title\n                            alternativeTitles\n                            cover\n                            updatedAt\n                        }\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    #graphql\n    query UserAvatar {\n        user {\n            me {\n                publicId\n                avatar\n            }\n        }\n    }\n"): (typeof documents)["\n    #graphql\n    query UserAvatar {\n        user {\n            me {\n                publicId\n                avatar\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    #graphql\n    mutation addBookmark($input: BookmarkInput!) {\n        bookmark {\n            add(input: $input) {\n                record {\n                    title\n                    id\n                }\n                issue {\n                    message\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    #graphql\n    mutation addBookmark($input: BookmarkInput!) {\n        bookmark {\n            add(input: $input) {\n                record {\n                    title\n                    id\n                }\n                issue {\n                    message\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    #graphql\n    mutation deleteBookmark($id: ID!) {\n        bookmark {\n            delete(id: $id) {\n                record {\n                    title\n                    id\n                }\n                issue {\n                    message\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    #graphql\n    mutation deleteBookmark($id: ID!) {\n        bookmark {\n            delete(id: $id) {\n                record {\n                    title\n                    id\n                }\n                issue {\n                    message\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation RateComic($input: RateInput!) {\n        comic {\n            rate(input: $input) {\n                record {\n                    totalCount\n                    rating\n                }\n                issue {\n                    message\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation RateComic($input: RateInput!) {\n        comic {\n            rate(input: $input) {\n                record {\n                    totalCount\n                    rating\n                }\n                issue {\n                    message\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment comicFragment on Comic {\n        id\n        rating {\n            rating\n            totalCount\n        }\n    }\n"): (typeof documents)["\n    fragment comicFragment on Comic {\n        id\n        rating {\n            rating\n            totalCount\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    #graphql\n    mutation AddCommentToComic($input: CommentInput!) {\n        comment {\n            create(input: $input) {\n                issue {\n                    message\n                }\n                record {\n                    repliesCount\n                    isReply\n                    reactions {\n                        like\n                        dislike\n                        userReactType\n                    }\n                    content\n                    createdAt\n                    updatedAt\n                    isPinned\n                    id\n                    author {\n                        id\n                        publicId\n                        name\n                        avatar\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    #graphql\n    mutation AddCommentToComic($input: CommentInput!) {\n        comment {\n            create(input: $input) {\n                issue {\n                    message\n                }\n                record {\n                    repliesCount\n                    isReply\n                    reactions {\n                        like\n                        dislike\n                        userReactType\n                    }\n                    content\n                    createdAt\n                    updatedAt\n                    isPinned\n                    id\n                    author {\n                        id\n                        publicId\n                        name\n                        avatar\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    #graphql\n    query CommentsByComic($id: ID!, $paginate: PaginateInput!, $sort: CommentSort!) {\n        comment {\n            allByComic(comicId: $id, paginate: $paginate, sort: $sort) {\n                pageInfo {\n                    totalCount\n                    hasNextPage\n                    endCursor\n                }\n                edges {\n                    node {\n                        createdAt\n                        content\n                        id\n                        isReply\n                        updatedAt\n                        reactions {\n                            userReactType\n                            like\n                            dislike\n                        }\n                        isPinned\n                        repliesCount\n                        author {\n                            id\n                            publicId\n                            avatar\n                            name\n                        }\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    #graphql\n    query CommentsByComic($id: ID!, $paginate: PaginateInput!, $sort: CommentSort!) {\n        comment {\n            allByComic(comicId: $id, paginate: $paginate, sort: $sort) {\n                pageInfo {\n                    totalCount\n                    hasNextPage\n                    endCursor\n                }\n                edges {\n                    node {\n                        createdAt\n                        content\n                        id\n                        isReply\n                        updatedAt\n                        reactions {\n                            userReactType\n                            like\n                            dislike\n                        }\n                        isPinned\n                        repliesCount\n                        author {\n                            id\n                            publicId\n                            avatar\n                            name\n                        }\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    #graphql\n    query CommentReplies($id: ID!, $sort: CommentSort!) {\n        commentReply {\n            allByCommentId(commentId: $id, sort: $sort) {\n                pageInfo {\n                    totalCount\n                }\n                edges {\n                    node {\n                        createdAt\n                        content\n                        isReply\n                        id\n                        updatedAt\n                        reactions {\n                            like\n                            dislike\n                            userReactType\n                        }\n                        mentionedUserPublicId\n                        isPinned\n                        author {\n                            id\n                            publicId\n                            avatar\n                            name\n                        }\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    #graphql\n    query CommentReplies($id: ID!, $sort: CommentSort!) {\n        commentReply {\n            allByCommentId(commentId: $id, sort: $sort) {\n                pageInfo {\n                    totalCount\n                }\n                edges {\n                    node {\n                        createdAt\n                        content\n                        isReply\n                        id\n                        updatedAt\n                        reactions {\n                            like\n                            dislike\n                            userReactType\n                        }\n                        mentionedUserPublicId\n                        isPinned\n                        author {\n                            id\n                            publicId\n                            avatar\n                            name\n                        }\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query CommentsByChapter($id: ID!, $paginate: PaginateInput!, $sort: CommentSort!) {\n        comment {\n            allByChapter(chapterId: $id, paginate: $paginate, sort: $sort) {\n                pageInfo {\n                    totalCount\n                    hasNextPage\n                    endCursor\n                }\n                edges {\n                    node {\n                        createdAt\n                        content\n                        isPinned\n                        reactions {\n                            like\n                            dislike\n                        }\n                        updatedAt\n                        isReply\n                        repliesCount\n                        id\n                        author {\n                            id\n                            publicId\n                            avatar\n                            name\n                        }\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query CommentsByChapter($id: ID!, $paginate: PaginateInput!, $sort: CommentSort!) {\n        comment {\n            allByChapter(chapterId: $id, paginate: $paginate, sort: $sort) {\n                pageInfo {\n                    totalCount\n                    hasNextPage\n                    endCursor\n                }\n                edges {\n                    node {\n                        createdAt\n                        content\n                        isPinned\n                        reactions {\n                            like\n                            dislike\n                        }\n                        updatedAt\n                        isReply\n                        repliesCount\n                        id\n                        author {\n                            id\n                            publicId\n                            avatar\n                            name\n                        }\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment commentFragment on Comment {\n        createdAt\n        content\n        isPinned\n        reactions {\n            like\n            dislike\n            userReactType\n        }\n        isReply\n        updatedAt\n        repliesCount\n        id\n        author {\n            id\n            publicId\n            avatar\n            name\n        }\n    }\n"): (typeof documents)["\n    fragment commentFragment on Comment {\n        createdAt\n        content\n        isPinned\n        reactions {\n            like\n            dislike\n            userReactType\n        }\n        isReply\n        updatedAt\n        repliesCount\n        id\n        author {\n            id\n            publicId\n            avatar\n            name\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    #graphql\n    mutation UpdateComment($input: CommentUpdateInput!) {\n        comment {\n            update(input: $input) {\n                record {\n                    id\n                    content\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    #graphql\n    mutation UpdateComment($input: CommentUpdateInput!) {\n        comment {\n            update(input: $input) {\n                record {\n                    id\n                    content\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    #graphql\n    mutation DeleteComment($commentId: ID!) {\n        comment {\n            delete(id: $commentId) {\n                record {\n                    id\n                }\n                issue {\n                    message\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    #graphql\n    mutation DeleteComment($commentId: ID!) {\n        comment {\n            delete(id: $commentId) {\n                record {\n                    id\n                }\n                issue {\n                    message\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    #graphql\n    mutation PinComment($commentId: ID!) {\n        comment {\n            pin(id: $commentId) {\n                record {\n                    id\n                }\n                issue {\n                    message\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    #graphql\n    mutation PinComment($commentId: ID!) {\n        comment {\n            pin(id: $commentId) {\n                record {\n                    id\n                }\n                issue {\n                    message\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    #graphql\n    mutation UnpinComment($commentId: ID!) {\n        comment {\n            unpin(id: $commentId) {\n                record {\n                    id\n                }\n                issue {\n                    message\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    #graphql\n    mutation UnpinComment($commentId: ID!) {\n        comment {\n            unpin(id: $commentId) {\n                record {\n                    id\n                }\n                issue {\n                    message\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n                                fragment _ on Chapter {\n                                    usersReadHistory {\n                                        id\n                                    }\n                                }\n                            "): (typeof documents)["\n                                fragment _ on Chapter {\n                                    usersReadHistory {\n                                        id\n                                    }\n                                }\n                            "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    #graphql\n    mutation addReadHistory($input: AddReadHistoryInput!) {\n        readHistory {\n            add(input: $input) {\n                record {\n                    id\n                    chapter {\n                        id\n                    }\n                }\n                issue {\n                    message\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    #graphql\n    mutation addReadHistory($input: AddReadHistoryInput!) {\n        readHistory {\n            add(input: $input) {\n                record {\n                    id\n                    chapter {\n                        id\n                    }\n                }\n                issue {\n                    message\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation generateInviteLink($teamId: ID!) {\n        team {\n            generateTeamInviteLink(teamId: $teamId, role: \"Viewer\") {\n                record\n                issue {\n                    message\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation generateInviteLink($teamId: ID!) {\n        team {\n            generateTeamInviteLink(teamId: $teamId, role: \"Viewer\") {\n                record\n                issue {\n                    message\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation SendInviteEmail($teamId: ID!, $email: String!) {\n        team {\n            sendInviteToEmail(teamId: $teamId, email: $email, role: \"Viewer\") {\n                record\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation SendInviteEmail($teamId: ID!, $email: String!) {\n        team {\n            sendInviteToEmail(teamId: $teamId, email: $email, role: \"Viewer\") {\n                record\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query UserSettingQuery {\n        user {\n            me {\n                name\n                avatar\n            }\n        }\n    }\n"): (typeof documents)["\n    query UserSettingQuery {\n        user {\n            me {\n                name\n                avatar\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query chapterImages($comicId: ID!, $paginate: ChapterPaginateInput!) {\n        chapter {\n            all(comicId: $comicId, paginate: $paginate, sort: asc) {\n                edges {\n                    node {\n                        id\n                        title\n                        volume\n                        number\n                        images {\n                            path\n                            aspectRatio\n                        }\n                    }\n                }\n\n                pageInfo {\n                    hasNextPage\n                    totalCount\n                    endCursor\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query chapterImages($comicId: ID!, $paginate: ChapterPaginateInput!) {\n        chapter {\n            all(comicId: $comicId, paginate: $paginate, sort: asc) {\n                edges {\n                    node {\n                        id\n                        title\n                        volume\n                        number\n                        images {\n                            path\n                            aspectRatio\n                        }\n                    }\n                }\n\n                pageInfo {\n                    hasNextPage\n                    totalCount\n                    endCursor\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment _ on Chapter {\n        usersReadHistory {\n            id\n        }\n    }\n"): (typeof documents)["\n    fragment _ on Chapter {\n        usersReadHistory {\n            id\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query LastChapterOfComic($id: ID!) {\n        comic {\n            one(id: $id) {\n                title\n                chapters(paginate: { first: 1, before: null }, sort: desc) {\n                    edges {\n                        node {\n                            id\n                            volume\n                            number\n                        }\n                    }\n                    pageInfo {\n                        totalCount\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query LastChapterOfComic($id: ID!) {\n        comic {\n            one(id: $id) {\n                title\n                chapters(paginate: { first: 1, before: null }, sort: desc) {\n                    edges {\n                        node {\n                            id\n                            volume\n                            number\n                        }\n                    }\n                    pageInfo {\n                        totalCount\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation AddChapter($input: addChapterInput!) {\n        chapter {\n            add(input: $input) {\n                record {\n                    id\n                    volume\n                    number\n                }\n                issue {\n                    message\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation AddChapter($input: addChapterInput!) {\n        chapter {\n            add(input: $input) {\n                record {\n                    id\n                    volume\n                    number\n                }\n                issue {\n                    message\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query ComicBaseInfo($id: ID!) {\n        comic {\n            one(id: $id) {\n                id\n                title\n                cover\n                description\n                status\n                maturityRating\n                language\n                createdAt\n                updatedAt\n                count\n                rating {\n                    totalCount\n                    rating\n                }\n                genres {\n                    title\n                }\n                tags {\n                    title\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query ComicBaseInfo($id: ID!) {\n        comic {\n            one(id: $id) {\n                id\n                title\n                cover\n                description\n                status\n                maturityRating\n                language\n                createdAt\n                updatedAt\n                count\n                rating {\n                    totalCount\n                    rating\n                }\n                genres {\n                    title\n                }\n                tags {\n                    title\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteComic($id: ID!) {\n        comic {\n            delete(id: $id) {\n                record {\n                    id\n                    title\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteComic($id: ID!) {\n        comic {\n            delete(id: $id) {\n                record {\n                    id\n                    title\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query DashboardOverview {\n        user {\n            me {\n                name\n                membersOf(paginate: { first: 5 }) {\n                    edges {\n                        node {\n                            role\n                            team {\n                                id\n                                name\n                                avatar\n                                comics {\n                                    edges {\n                                        node {\n                                            id\n                                            title\n                                            cover\n                                            status\n                                            count\n                                            updatedAt\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                notifications(paginate: { first: 5 }) {\n                    edges {\n                        node {\n                            id\n                            title\n                            description\n                            createdAt\n                            type\n                        }\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query DashboardOverview {\n        user {\n            me {\n                name\n                membersOf(paginate: { first: 5 }) {\n                    edges {\n                        node {\n                            role\n                            team {\n                                id\n                                name\n                                avatar\n                                comics {\n                                    edges {\n                                        node {\n                                            id\n                                            title\n                                            cover\n                                            status\n                                            count\n                                            updatedAt\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                notifications(paginate: { first: 5 }) {\n                    edges {\n                        node {\n                            id\n                            title\n                            description\n                            createdAt\n                            type\n                        }\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query DashboardStatistics {\n        user {\n            me {\n                membersOf(paginate: { after: null }) {\n                    edges {\n                        node {\n                            team {\n                                id\n                                name\n                                comics {\n                                    edges {\n                                        node {\n                                            id\n                                            title\n                                            rating {\n                                                rating\n                                                totalCount\n                                            }\n                                            usersReadHistory(paginate: { first: null }) {\n                                                pageInfo {\n                                                    totalCount\n                                                }\n                                            }\n                                            comments(paginate: { after: null }) {\n                                                pageInfo {\n                                                    totalCount\n                                                }\n                                            }\n                                            subscriptions {\n                                                pageInfo {\n                                                    totalCount\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query DashboardStatistics {\n        user {\n            me {\n                membersOf(paginate: { after: null }) {\n                    edges {\n                        node {\n                            team {\n                                id\n                                name\n                                comics {\n                                    edges {\n                                        node {\n                                            id\n                                            title\n                                            rating {\n                                                rating\n                                                totalCount\n                                            }\n                                            usersReadHistory(paginate: { first: null }) {\n                                                pageInfo {\n                                                    totalCount\n                                                }\n                                            }\n                                            comments(paginate: { after: null }) {\n                                                pageInfo {\n                                                    totalCount\n                                                }\n                                            }\n                                            subscriptions {\n                                                pageInfo {\n                                                    totalCount\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation DeleteUserTeam($teamId: ID!) {\n        team {\n            delete(id: $teamId) {\n                record {\n                    id\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation DeleteUserTeam($teamId: ID!) {\n        team {\n            delete(id: $teamId) {\n                record {\n                    id\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query MeBookmarks {\n        user {\n            me {\n                bookmarks(paginate: { after: null }) {\n                    edges {\n                        node {\n                            id\n                            title\n                            comics {\n                                id\n                                title\n                                cover\n                                lastReadChapter {\n                                    volume\n                                    id\n                                    number\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query MeBookmarks {\n        user {\n            me {\n                bookmarks(paginate: { after: null }) {\n                    edges {\n                        node {\n                            id\n                            title\n                            comics {\n                                id\n                                title\n                                cover\n                                lastReadChapter {\n                                    volume\n                                    id\n                                    number\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query MeProfileInfo {\n        user {\n            me {\n                name\n                publicId\n                avatar\n                description\n                background\n                socialLinks\n                membersOf(paginate: { first: null }) {\n                    edges {\n                        node {\n                            role\n                            id\n                            team {\n                                id\n                                name\n                                avatar\n                                description\n                                comics {\n                                    edges {\n                                        node {\n                                            id\n                                            title\n                                            cover\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query MeProfileInfo {\n        user {\n            me {\n                name\n                publicId\n                avatar\n                description\n                background\n                socialLinks\n                membersOf(paginate: { first: null }) {\n                    edges {\n                        node {\n                            role\n                            id\n                            team {\n                                id\n                                name\n                                avatar\n                                description\n                                comics {\n                                    edges {\n                                        node {\n                                            id\n                                            title\n                                            cover\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query UserInfo($id: ID!) {\n        user {\n            one(id: $id) {\n                id\n                avatar\n                name\n                publicId\n                description\n                background\n                membersOf(paginate: { first: null }) {\n                    edges {\n                        node {\n                            id\n                            role\n                            comics {\n                                id\n                                cover\n                                title\n                            }\n                            team {\n                                id\n                                description\n                                name\n                                avatar\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query UserInfo($id: ID!) {\n        user {\n            one(id: $id) {\n                id\n                avatar\n                name\n                publicId\n                description\n                background\n                membersOf(paginate: { first: null }) {\n                    edges {\n                        node {\n                            id\n                            role\n                            comics {\n                                id\n                                cover\n                                title\n                            }\n                            team {\n                                id\n                                description\n                                name\n                                avatar\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    #graphql\n    mutation AddComic($input: AddComicInput!) {\n        comic {\n            add(input: $input) {\n                issue{\n                    message\n                }\n                record {\n                    id\n                    title\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    #graphql\n    mutation AddComic($input: AddComicInput!) {\n        comic {\n            add(input: $input) {\n                issue{\n                    message\n                }\n                record {\n                    id\n                    title\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query ComicsWithFilters($paginate: PaginateInput!, $filter: ComicFilterInput) {\n        comic {\n            all(paginate: $paginate, filter: $filter) {\n                pageInfo {\n                    endCursor\n                    totalCount\n                    hasNextPage\n                }\n                edges {\n                    node {\n                        id\n                        cover\n                        title\n                        alternativeTitles\n                        updatedAt\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query ComicsWithFilters($paginate: PaginateInput!, $filter: ComicFilterInput) {\n        comic {\n            all(paginate: $paginate, filter: $filter) {\n                pageInfo {\n                    endCursor\n                    totalCount\n                    hasNextPage\n                }\n                edges {\n                    node {\n                        id\n                        cover\n                        title\n                        alternativeTitles\n                        updatedAt\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query PopularComics($paginate: PaginateInput!) {\n        comic {\n            popular(paginate: $paginate) {\n                edges {\n                    node {\n                        title\n                        cover\n                        id\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query PopularComics($paginate: PaginateInput!) {\n        comic {\n            popular(paginate: $paginate) {\n                edges {\n                    node {\n                        title\n                        cover\n                        id\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query UserComicForUpdate($id: ID!) {\n        comic {\n            one(id: $id) {\n                genres {\n                    id\n                    title\n                }\n                tags {\n                    id\n                    title\n                }\n                team {\n                    id\n                    avatar\n                    name\n                }\n                title\n                alternativeTitles\n                cover\n                description\n                language\n                status\n                maturityRating\n            }\n        }\n    }\n"): (typeof documents)["\n    query UserComicForUpdate($id: ID!) {\n        comic {\n            one(id: $id) {\n                genres {\n                    id\n                    title\n                }\n                tags {\n                    id\n                    title\n                }\n                team {\n                    id\n                    avatar\n                    name\n                }\n                title\n                alternativeTitles\n                cover\n                description\n                language\n                status\n                maturityRating\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateComic($id: ID!, $input: UpdateComicInput!) {\n        comic {\n            update(id: $id, input: $input) {\n                record {\n                    id\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation UpdateComic($id: ID!, $input: UpdateComicInput!) {\n        comic {\n            update(id: $id, input: $input) {\n                record {\n                    id\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateCommentReaction($input: UpdateCommentReactionInput!) {\n        comment {\n            updateReaction(input: $input) {\n                issue {\n                    message\n                }\n                record {\n                    reactions {\n                        like\n                        dislike\n                        userReactType\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation UpdateCommentReaction($input: UpdateCommentReactionInput!) {\n        comment {\n            updateReaction(input: $input) {\n                issue {\n                    message\n                }\n                record {\n                    reactions {\n                        like\n                        dislike\n                        userReactType\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteChapter($id: ID!) {\n        chapter {\n            delete(id: $id) {\n                record {\n                    id\n                }\n                issue {\n                    message\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteChapter($id: ID!) {\n        chapter {\n            delete(id: $id) {\n                record {\n                    id\n                }\n                issue {\n                    message\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query userComics {\n        user {\n            me {\n                id\n                membersOf(paginate: { first: null }) {\n                    edges {\n                        node {\n                            id\n                            team {\n                                id\n                                name\n                                comics {\n                                    edges {\n                                        node {\n                                            id\n                                            cover\n                                            title\n                                            alternativeTitles\n                                            updatedAt\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query userComics {\n        user {\n            me {\n                id\n                membersOf(paginate: { first: null }) {\n                    edges {\n                        node {\n                            id\n                            team {\n                                id\n                                name\n                                comics {\n                                    edges {\n                                        node {\n                                            id\n                                            cover\n                                            title\n                                            alternativeTitles\n                                            updatedAt\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n                            fragment _Team on Team {\n                                id\n                                avatar\n                                name\n                            }\n                        "): (typeof documents)["\n                            fragment _Team on Team {\n                                id\n                                avatar\n                                name\n                            }\n                        "];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;